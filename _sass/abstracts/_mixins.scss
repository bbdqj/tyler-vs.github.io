// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}


// @mixin mq-small {
//   @media (min-width: $bp-small) and (max-width: ($bp-medium - 1px) ) {
//     @content;
//   }
// }

// @mixin mq-medium {
//   @media (min-width: $bp-medium) and (max-width: ($bp-large - 1px) ) {
//     @content;
//   }
// }

// @mixin mq-large {
//   @media (min-width: $bp-large) {
//     @content;
//   }
// }


/*

  Using sass mixins to handle media queries, uses same as boostraps.

 */


/* media queries for set breakpoint size and upward */

@mixin mq-small-up {
  @media (min-width: $bp-small) {
    @content;
  }
}

@mixin mq-medium-up {
  @media (min-width: $bp-medium) {
    @content;
  }
}

@mixin mq-large-up {
  @media (min-width: $bp-large) {
    @content;
  }
}

@mixin mq-xlarge-up {
  @media (min-width: $bp-xlarge) {
    @content;
  }
}


/*
  For media query rules that occur at a max-width and
  downards
 */

@mixin mq-small-down {
  @media (max-width: $bp-small) {
    @content;
  }
}

@mixin mq-medium-down {
  @media (max-width: $bp-medium) {
    @content;
  }
}

@mixin mq-large-down {
  @media (max-width: $bp-large) {
    @content;
  }
}

@mixin mq-xlarge-down {
  @media (max-width: $bp-xlarge) {
    @content;
  }
}


@mixin mq-small-only {
  @media (min-width: $bp-small) and (max-width: ($bp-medium - 1px) ) {
    @content;
  }
}

@mixin mq-medium-only {
  @media (min-width: $bp-medium) and (max-width: ($bp-large - 1px) ) {
    @content;
  }
}

@mixin mq-large-only {
  @media (min-width: $bp-large) and (max-width: ($bp-xlarge - 1px) ) {
    @content;
  }
}

@mixin mq-xlarge-only {
  @media (min-width: $bp-xlarge) {
    @content;
  }
}


// @mixin mq-up($key: 'small') {
//   @if (map-key-exists($breakpoints, $key)) {
//     @return
//   }
// }